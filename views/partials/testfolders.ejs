<style>
  .context-menu {
    display: none;
    position: absolute;
    background-color: #fff;
    border: 1px solid #ddd;
    width: 150px;
    z-index: 1000;
    border-radius: 0.2rem;
   
  }
  

  .context-menu-item {
    padding: 8px 12px;
    cursor: pointer;
  }

  .context-menu-item:hover {
    background-color: #0D6EFD;
    border-radius: 0.2rem;
 
    color: white;
    
  }
  .sub-menu {
      display: none;
      position: absolute;
      width: 150px;
      background-color: #fff;
      top: 0;
      left: 100%;
      color: black;
    
    }

    .context-menu-item:hover .sub-menu {
      display: block;
    }
</style>




<div class="row my-1 sticky-top" style="">
  <div class="input-group flex-nowrap   ">
    <!-- <input type="text" class="form-control" placeholder="Username" > -->
    
  
    <button  class="btn btn-dark me-2" onclick="back()" ><i class="fa-solid fa-arrow-left"></i></button>
    <button class="btn btn-primary me-2" onclick="home()"><i class="fa-solid fa-house"></i></button>
    <input type="text" class="form-control" id="filterInput" placeholder="Type to Search" aria-label="Username" aria-describedby="addon-wrapping" 
    style="font-size: 0.7rem; border-radius: 0;"
    >
    <!-- <span class="input-group-text" id="addon-wrapping"> 
      <i class="fa-solid fa-magnifying-glass m-auto  " style="font-size: 1rem; color: rgb(42, 97, 99);"></i> 
    </span> -->
  
  </div>
</div>



<div class="row" style="" >





<div class=" p-3 py-0 col " style="max-width: 400px; "  >

  <div class="d-flex mt-1" >
    <div class="mx-1" >
      <button style="font-size: 0.6rem;" class="btn btn-primary btn-sm me-auto" onclick="toggleFolders(this)" id="saveButton"><i class="fa-solid fa-eye"></i></button>
      <!-- <button class="btn btn-primary btn-sm " onclick="deletefile(this)" id="saveButton"><i class="fa-solid fa-file-circle-plus"></i></button> -->

    </div>
    <div class="mx-1">
      <!-- <button class="btn btn-primary btn-sm me-auto" onclick="deletefile(this)" id="saveButton"><i class="fa-solid fa-folder-plus"></i></button> -->
      <button style="font-size: 0.6rem;" class="btn btn-primary btn-sm " onclick="" id="saveButton"><i class="fa-solid fa-file-circle-plus"></i></button>

    </div>
  </div>
    <div class="p-2 scrollbar-pink" id="explorer" style="height: 79vh;  overflow-y: auto; " >
      <% folders.forEach((element , index) => { %>
        <% if (index >2 && element !== '' ) { %>
            <% let parts = element.split(" "); %>
            <% let name = parts[parts.length - 1]; %>

            <div  class=" folders " style="border-bottom: 1px solid rgba(104, 104, 104, 0.37);  " oncontextmenu="menu(this)" >
            <p  onclick="cd( this , '<%= name %>')" type="button" <%= parts[0].includes("d") ? `` : `hx-get=/testfileditor`%> hx-trigger="click" hx-target="#file" hx-swap="innerHTML" data-type="<%= parts[0].includes("d") ? "dic" : "file"  %>"   class="text-light mb-1  " >
              <i 
              style="opacity: <%= name[0]==="." ? 0.3 : 1%>"
              class="<%= parts[0].includes("d") ? "fa-solid fa-folder text-primary " : "fa-solid fa-file"%>" >
            </i>
            <span class="hover">
              <%= name %>
            </span>
             
            </p>

    
              
             
              <!-- Context menu -->
              <div class="context-menu" id="contextMenu" style="font-size: 0.8rem; z-index: 1000;">
                <!-- <div class="context-menu-item" onclick="renameAction()">
                  <i class="fa-solid fa-square-up-right"></i> Open
                </div> -->
                
                <div class="context-menu-item" onclick="renameAction()">
                  <i class="fas fa-edit"></i> Rename
                </div>
                <div class="context-menu-item" onclick="copy('<%= name %>')">
                  <i class="fa-solid fa-copy"></i> Copy
                </div>

                <% if (parts[0].includes("d")) { %>
                  <div class="context-menu-item" onclick="pasteInsideAction()">
                    <i class="fas fa-clipboard"></i> Paste Inside
                  </div>
  
                <% } %>

                
                <div class="context-menu-item" onclick="deletefile(this)">
                  <i class="fas fa-trash"></i> Delete
                </div>
              </div>
              


              
            </div>
           
            




        <% } %>
     
    <% }) %>
    <div class="context-menu" id="contextMenuExplorer" style="font-size: 0.8rem; z-index: 0;">
      <div class="context-menu-item" onclick="">
        <i class="fa-solid fa-file-code"></i> Scripts
        <!-- Sub-menu for "Scripts" -->
        <div class="sub-menu p-1 rounded-2">

          <% scripts.forEach(element => { %>
            <div class="context-menu-item" onclick="runScript(this)">
              <i class="fas fa-code"></i> <%= element.name %>
              <textarea class="d-none" id="" cols="30" rows="10"><%= element.script %></textarea>
            </div>
          <% }) %>
         
          

        </div>
      </div>
      <div class="context-menu-item" onclick="createfile()">
        <i class="fa-solid fa-file-circle-plus"></i> New File
      </div>
      <div class="context-menu-item" onclick="createfolder()">
        <i class="fa-solid fa-folder-plus"></i> New Folder
      </div>
      <div class="context-menu-item" onclick="paste(this)">
        <i class="fas fa-clipboard"></i> Paste
      </div>
    </div>
  
    </div>
   



   
</div>

<div class="col">
  <div id="file" style="height: 75vh;">
    <%- include('./foldersettings.ejs') %>
  </div>

</div>


</div>
  



<textarea  hx-post="/testchangedic" hx-trigger="click" hx-target="#output" name="command" id="changedir" style="display: none;" ></textarea>





<script>

function toggleFolders(el) {
  var folders = document.querySelectorAll('.folders');
  folders.forEach(element => {
    var folderName = element.querySelector('span').innerHTML.trim();
    console.log(folderName);
    
    if (folderName[0] === '.') {
      // If folder starts with '.', toggle the display property
      element.style.display = (element.style.display === 'none') ? '' : 'none';
      console.log(folderName);
    }
  });
  el.innerHTML === '<i class="fa-solid fa-eye-slash"></i>'?el.innerHTML='<i class="fa-solid fa-eye"></i>':el.innerHTML='<i class="fa-solid fa-eye-slash"></i>'
}


</script>




<script>

var explorer = document.getElementById('explorer');
var folders = document.querySelectorAll('.folders');
var contextMenu = document.getElementById('contextMenu');
var contextMenuExplorer = document.getElementById('contextMenuExplorer');

explorer.addEventListener('contextmenu', function(event) {
  event.preventDefault();
  showMenu(event, contextMenuExplorer , null);
});

// folders.forEach(function (item) {
//   item.addEventListener('contextmenu', function(event) {
//     event.preventDefault();
//     event.stopPropagation();
//     showMenu(event, contextMenu, item);
//   });
// });


function menu(el) {
  var allContextMenus = document.querySelectorAll('.context-menu');
  allContextMenus.forEach(function(menu) {
    menu.style.display = 'none';
  });

  
    event.preventDefault();
    event.stopPropagation();
    showMenu(event, el.querySelector('.context-menu'), el);
}


function showMenu(event, menu, el = null) {
  Array.from(folders).forEach(item => item.style.backgroundColor = '');
  document.getElementById('contextMenu').style.display = 'none';
  document.getElementById('contextMenuExplorer').style.display = 'none';

  menu.style.display = 'block';
  menu.style.left = event.clientX  + 'px';
  menu.style.top = event.clientY-80  + 'px';

  if(el){
    file = el.querySelector('span').textContent.trim();

  }


  document.addEventListener('click', function(event) {
      
      hideContextMenu(el, menu);
   
    
  });

  if (el) {
    el.style.backgroundColor = 'red';
  }
}

function hideContextMenu(el, menu) {
  menu.style.display = 'none';
  document.removeEventListener('click', hideContextMenu);
  if (el) {
    el.style.backgroundColor = '';
  }
}


</script>



<script>




async function cd(el , name) {
    const type = el.getAttribute('data-type');

    if (type === "dic") {
        const currentDir = name
        dir += currentDir + '/';

        const command = `cd ${dir}\nls -la`;
        console.log(command);
        console.log(dir);

        document.getElementById('changedir').innerHTML = command;
        document.getElementById('changedir').click();
    }else{
     
  
      readfile(name)
      
      file=name

    }
}

</script>



<script>
    document.getElementById('filterInput').addEventListener('input', function() {
      var filterValue = this.value.toLowerCase(); // Get the value entered by the user and convert it to lowercase for case-insensitive filtering
      var itemList = document.getElementById('explorer');
      var items = itemList.getElementsByTagName('p');
  
      Array.from(items).forEach(function(item) {
        var text = item.textContent.toLowerCase();
        if (text.indexOf(filterValue) > -1) {
          item.style.display = 'block'; // Show the item if the text matches the filter
        } else {
          item.style.display = 'none'; // Hide the item if the text does not match the filter
        }
      });

      
    });


</script>


<script>
  
  async function readfile(el) {
  var name = el.innerHTML
  console.log(`cd ${dir.trim()}\ncat ${el}`);
  const data = await execute(`cd ${dir}\ncat ${el}` )


  setTimeout(function () {
            editor.setValue(data);
        }, 100); // 100 milliseconds (0.1 seconds) delay


  el.innerHTML = name

  }
      


  async function back() {
    const pathParts = dir.split('/');


    if (pathParts.length > 2) {
      dir = pathParts.slice(0, -2).join('/') + '/';



        const command = `cd ${dir}\nls -la`;
        console.log(command);


        document.getElementById('changedir').innerHTML = command;
        document.getElementById('changedir').click();
    } else {
      dir = '/'
    }
  }

  async function home() {

    dir = '/root/';



      const command = `cd ${dir}\nls -la`;
      console.log(command);


      document.getElementById('changedir').innerHTML = command;
      document.getElementById('changedir').click();

  }


  async function deletefile(el) {
    var name = el.innerHTML;

    // Display a confirmation dialog
    var confirmDelete = confirm(`Are you sure you want to delete '${file}'`);

    if (confirmDelete) {
        // Proceed with the deletion
        el.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

        try {
            const data = await execute(`rm -r ${dir + file}`);
            console.log(data);
            el.innerHTML = name;
            document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
            document.getElementById('changedir').click();

        } catch (error) {
            console.error("Error deleting file:", error);
            el.innerHTML = name;
            alert("An error occurred while deleting the file.");
        }
    } else {




        // User canceled the deletion, revert the changes
        el.innerHTML = name;
    }
}


</script>


<script>


  async function copy(el) {
    copyfile = dir+el
    console.log(copyfile);
  }


  async function paste(el) {

    console.log(copyfile);
    console.log(`cp -r ${copyfile} ${dir}`);
    document.getElementById('overlay').style.display = 'block';
    const data = await execute(`cp -r ${copyfile} ${dir}`)
    document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
    document.getElementById('changedir').click();
    document.getElementById('overlay').style.display = 'none';


  }


  async function npmi() {
  
    
    document.getElementById('overlay').style.display = 'block';
    const data = await execute(`cd ${dir} \n npm i`)
    document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
    document.getElementById('changedir').click();
    document.getElementById('overlay').style.display = 'none';
  }


  async function createfolder() {
  // Prompt the user for folder name
  const folderName = prompt('Enter the folder name:');

  // Check if the user provided a folder name
  if (folderName) {
    const data = await execute(`mkdir ${dir}/${folderName}`);
    document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
    document.getElementById('changedir').click();
  } else {
    // Handle the case where the user did not provide a folder name
    console.log('Folder name not provided');
  }
}





async function createfile() {
  
  // Prompt the user for file name
  const fileName = prompt('Enter the file name:');
  

  // Check if the user provided a file name
  if (fileName) {
    const data = await execute(`touch ${dir}/${fileName}`);
    document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
    document.getElementById('changedir').click();
  } else {
    // Handle the case where the user did not provide a file name
    console.log('File name not provided');
  }
}

async function runScript(el) {
  var script = el.querySelector('textarea').value
  const data = await execute(`cd ${dir}\n${script}`);

    document.getElementById('changedir').innerHTML = `cd ${dir}\nls -la`;
    document.getElementById('changedir').click();
  console.log(data);


}



</script>