<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SSH Terminal</title>
  <style>
    body {
      font-family: 'Courier New', monospace;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      background-color: #282c34;
    }

    #terminal {
      width: 80%;
      height: 400px;
      border: 1px solid #000000;
      overflow: auto;
      padding: 10px;
      background-color: #1e1e1e;
      color: #ffffff;
    }

    input {
      width: calc(100% - 22px);
      padding: 10px;
      border: none;
      background-color: #1e1e1e;
      color: #ffffff;
      outline: none;
    }
  </style>
</head>
<body>

<div id="terminal"></div>
<input id="input" placeholder="Type your command..." autocomplete="off">

<script>
  const terminalDiv = document.getElementById('terminal');
  const inputElement = document.getElementById('input');
  const ws = new WebSocket('wss://localhost:8181/terminal/google-oauth2|104503941770410173437'); // Replace USER_ID with the actual user ID

  const commandHistory = [];
  let historyIndex = 0;

  ws.onopen = (event) => {
    console.log('WebSocket connection opened:', event);
  };

  ws.onmessage = (event) => {
    const data = event.data;
    writeToTerminal(data);
  };

  ws.onclose = (event) => {
    console.log('WebSocket connection closed:', event);
  };

  function writeToTerminal(message) {
    const div = document.createElement('div');
    div.textContent = message;
    terminalDiv.appendChild(div);
    terminalDiv.scrollTop = terminalDiv.scrollHeight;
  }

  function sendCommand(command) {
    ws.send(command);
    commandHistory.push(command);
    historyIndex = commandHistory.length;
    inputElement.value = '';
  }

  inputElement.addEventListener('keydown', (event) => {
    if (event.key === 'Enter') {
      const command = inputElement.value.trim();
      if (command !== '') {
        writeToTerminal('$ ' + command); // Display the entered command in the terminal
        sendCommand(command);
      }
    } else if (event.key === 'ArrowUp') {
      // Navigate command history (up)
      if (historyIndex > 0) {
        historyIndex--;
        inputElement.value = commandHistory[historyIndex];
      }
    } else if (event.key === 'ArrowDown') {
      // Navigate command history (down)
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        inputElement.value = commandHistory[historyIndex];
      } else {
        // Clear input when at the latest command in history
        historyIndex = commandHistory.length;
        inputElement.value = '';
      }
    }
  });
</script>

</body>
</html>
