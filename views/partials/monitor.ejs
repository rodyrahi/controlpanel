<!DOCTYPE html>
<html lang="en">

<%- include('./header.ejs') %>

<body style="font-family: 'Inclusive Sans', sans-serif; background-color: #343541;">

  <div style="width:80%; margin: auto;">
    <label for="daysFilter">Select Days:</label>
    <select id="daysFilter" onchange="fetchAndDrawChart()">
      <option value="5">Last 5 mins</option>
      <option value="604800">Last 7 Days</option>
      <option value="2592000">Last 30 Days</option>
      <!-- Add more options as needed -->
    </select>
    <canvas id="lineChart"></canvas>
  </div>


  <script>

    var user = "<%= server %>"
     async function execute(command) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
  
        xhr.open("POST", "https://api.kadmin.online/execute/" + user, true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status == 200) {
  
              resolve(xhr.responseText);
            } else {
              reject(new Error(`Request failed with status: ${xhr.status}`));
            }
          }
        };
  
        xhr.send("command=" + encodeURIComponent(command));
      });
    }
  </script>
    



  <script>
  
      function parseLogFile(logData, selectedMinutes) {
        const lines = logData.split('\n');
        const timestamps = [];
        const cpuUsages = [];

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const match = line.match(/(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}).*CPU Usage: (\d+(\.\d+)?)%/);
            if (match) {
              const timeOfLine = new Date(match[1].split(',')[0]).getTime();
              const lastMinute = Date.now() - (331+selectedMinutes) * 60 * 1000;


              console.log(timeOfLine <= lastMinute);

              if (timeOfLine > lastMinute) {
                  timestamps.push(match[1]);
                  cpuUsages.push(parseFloat(match[2]));
              }
            }
        }

        return { timestamps, cpuUsages };
      }


    // Function to draw line chart
    function drawLineChart(timestamps, cpuUsages) {
      var ctx = document.getElementById('lineChart').getContext('2d');

      // Check if the chart exists
      if (window.myChart) {
        // Update the existing chart with new data
        window.myChart.data.labels = timestamps;
        window.myChart.data.datasets[0].data = cpuUsages;
        window.myChart.update();
      } else {
        // Create a new chart
        window.myChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: timestamps,
            datasets: [{
              label: 'CPU Usage',
              data: cpuUsages,
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1,
              fill: false
            }]
          },
          options: {
            scales: {
              y: {
                min: 0,
                max: 100
              }
            }
          }
        });
      }
    }

    // Function to fetch log data and draw chart
    async function fetchAndDrawChart() {
      const selectedMinutes = document.getElementById('daysFilter').value;
      const data = await execute('cat /root/app/deamon/logfile.log');
      const { timestamps, cpuUsages } = parseLogFile(data, parseInt(selectedMinutes));
      drawLineChart(timestamps, cpuUsages);
    }


    // Call the function to fetch and draw the chart initially
    fetchAndDrawChart();

    // Refresh the chart every 5 seconds
    setInterval(fetchAndDrawChart, 5000);
  </script>





</body>
</html>




  
