<!DOCTYPE html>
<html lang="en">

<%- include('./header.ejs') %>

<body class="text-light" style="font-family: 'Inclusive Sans', sans-serif; background-color: #343541;">



  <div class="container-fluid">
    <div class="row">
      <div class="d-flex">
        <div class="me-auto">
          <h2>System Usage</h2>
        </div>
       
        <div class="ms-auto my-auto ">
          <select style="" class="form-select form-select-sm" id="daysFilter" onchange="fetchAndDrawChart()">
            <option value="5">Last 5 mins</option>
            <option value="2880">Last 2 Days</option>
            <option value="604800">Last 7 Days</option>
            <option value="2592000">Last 30 Days</option>
          </select>
        </div>

      </div>
      <hr>
      <div class="col d-flex flex-column" style="height: 80vh;">
       


        <!-- CPU Usage Chart -->
        <canvas id="cpulineChart"></canvas>

        <!-- RAM Usage Chart -->
        <canvas id="memorylineChart"></canvas>
        
      </div>
      <div class="col">
        <canvas id="disklineChart"></canvas>
      </div>
    </div>
  </div>



  <script>

    var user = "<%= server %>"
     async function execute(command) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
  
        xhr.open("POST", "https://api.kadmin.online/execute/" + user, true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  
        xhr.onreadystatechange = function() {
          if (xhr.readyState == 4) {
            if (xhr.status == 200) {
  
              resolve(xhr.responseText);
            } else {
              reject(new Error(`Request failed with status: ${xhr.status}`));
            }
          }
        };
  
        xhr.send("command=" + encodeURIComponent(command));
      });
    }
  </script>
    



    <script>
      const chartConfig = {
        type: 'line',
        borderWidth: 1,
        fill: false,
        options: {
          scales: {
            y: {
              min: 0,
              max: 100,
            },
          },
        },
      };
    
      function parseLog(logData, selectedMinutes, metric) {
        const lines = logData.split('\n');
        const timestamps = [];
        const usages = [];
    
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          const match = line.match(new RegExp(`(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}).*(${metric}) Usage: (\\d+(\\.\\d+)?)%`));
    
          if (match) {
            const timeOfLine = new Date(match[1].split(',')[0]).getTime();
            const lastMinute = Date.now() - (331 + selectedMinutes) * 60 * 1000;
    
            if (timeOfLine > lastMinute) {
              timestamps.push(match[1].split(',')[0].split(' ')[0]);
              usages.push(parseFloat(match[3]));
            }
          }
        }
    
        return { timestamps, usages };
      }
    
      function drawLineChart(ctx, label, timestamps, usages) {
        const config = {
          ...chartConfig,
          data: {
            labels: timestamps,
            datasets: [
              {
                label,
                data: usages,
                borderColor: 'rgba(75, 192, 192, 1)',
              },
            ],
          },
        };
    
        if (ctx.myChart) {
          ctx.myChart.data.labels = timestamps;
          ctx.myChart.data.datasets[0].data = usages;
          ctx.myChart.update();
        } else {
          ctx.myChart = new Chart(ctx, config);
        }
      }
    
      async function fetchAndDrawChart() {
        const selectedMinutes = document.getElementById('daysFilter').value;
        const data = await execute('cat /root/app/deamon/logfile.log');
        
        const metrics = ['CPU', 'Memory', 'Disk'];
    
        metrics.forEach(metric => {
          const { timestamps, usages } = parseLog(data, parseInt(selectedMinutes), metric);
          const chartId = metric.toLowerCase() + 'lineChart';
          drawLineChart(document.getElementById(chartId).getContext('2d'), `${metric} Usage`, timestamps, usages);
        });
      }
    
      fetchAndDrawChart();
      setInterval(fetchAndDrawChart, 5000);
    </script>
    


</body>
</html>




  


