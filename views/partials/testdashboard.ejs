

<style>
  
  #ramstats {
    height: 100%;
    transition: width 0.1s ease; /* Adjust the duration and easing as needed */
    
  }

  #cpustats {
    height: 100%;
    transition: width 0.5s ease; /* Adjust the duration and easing as needed */
    min-width: 1%;
  }
</style>

  <!-- Your chart canvas will be placed here -->

  <div class="row text-light fw-bold p-1" style="font-family: 'Rubik', sans-serif;">

    <h2  class="fw-bold m-1" >System Stats</h2>
    <div class="col-md-6 col " style="height: 30vh">
     
      <p class="mb-1">Ram Usage</p>
      
      <div class="d-flex mb-3 bg-dark " style="height:30%" >
        <div class="bg-black border-end " id="ramstats" ></div>
        <p class="my-auto ms-2" id="ram">
          0%
        </p>
      </div>

      <p class="mb-1 ">Cpu Usage</p>
      <div class="d-flex bg-dark" style="height:30%">

        <div class="bg-black border-end" id="cpustats" ></div>
        <p class="my-auto ms-2" id="cpu">
          0%
        </p>
      </div>

           

     
     
     
    </div>
    

  </div>

  <!-- Your JavaScript code for creating the chart will go here -->

 
  
  <script>
async function getdata() {
  try {
    const ramUsage = await execute('free | awk \'/^Mem/ {print $3/$2 * 100.0}\'');
    const cpuUsage = await execute('top -bn1 | awk \'/^%Cpu/ {print $2}\'');

    
    if (!isNaN(ramUsage) && !isNaN(cpuUsage)) { // Check if ramUsage is a valid number
      console.log(ramUsage+'%');
      document.getElementById('ramstats').style.width = Math.round(ramUsage) + '%';
      document.getElementById('ram').innerHTML = Math.round(ramUsage) + '%'
      document.getElementById('cpustats').style.width = Math.round(cpuUsage) + '%';
      document.getElementById('cpu').innerHTML = Math.round(cpuUsage) + '%'

    } else {
      console.error('Invalid RAM usage value:', ramUsage);
    }
  } catch (error) {
    console.error('Error fetching RAM usage:', error);
  }
}

    getdata()
    var statsinterval = setInterval(getdata, 4000);
  </script>
  
 <!-- <script>
    // RAM Chart
    var ramCtx = document.getElementById('ramChart').getContext('2d');
    
    var ramData = {
      labels: [],
      datasets: [{
        label: 'RAM Usage (%)',
        borderColor: 'rgb(75, 192, 192)',
        borderWidth: 2,
        data: [],
        fill: false,
      }]
    };
  
    var ramHistory = [];
  
    var ramChart = new Chart(ramCtx, {
      type: 'line',
      data: ramData,
      options: {
        scales: {
          y: { min: 0, max: 100 }
        }
      }
    });
  
    // CPU Chart
    var cpuCtx = document.getElementById('cpuChart').getContext('2d');
    
    var cpuData = {
      labels: [],
      datasets: [{
        label: 'CPU Usage (%)',
        borderColor: 'rgb(255, 99, 132)',
        borderWidth: 2,
        data: [],
        fill: false,
      }]
    };
  
    var cpuHistory = [];
  
    var cpuChart = new Chart(cpuCtx, {
      type: 'line',
      data: cpuData,
      options: {
        scales: {
          y: { min: 0, max: 100 }
        }
      }
    });
  
    async function fetchData() {
      // RAM Data
      const ramUsage = await execute('free | awk \'/^Mem/ {print $3/$2 * 100.0}\'');
      const ramTimestamp = new Date().toLocaleTimeString();
  
      // Add new RAM data
      ramData.labels.push(ramTimestamp);
      ramData.datasets[0].data.push(parseFloat(ramUsage));
  
      // Save RAM data in history
      ramHistory.push({ timestamp: ramTimestamp, usage: parseFloat(ramUsage) });
  
      // Remove oldest RAM data if more than 20 datasets
      if (ramData.labels.length > 20) {
        ramData.labels.shift();
        ramData.datasets[0].data.shift();
      }
  
      // Update RAM chart
      ramChart.update();
  
      // CPU Data
      const cpuUsage = await execute('top -bn1 | awk \'/^%Cpu/ {print $2}\'');
      const cpuTimestamp = new Date().toLocaleTimeString();
  
      // Add new CPU data
      cpuData.labels.push(cpuTimestamp);
      cpuData.datasets[0].data.push(parseFloat(cpuUsage));
  
      // Save CPU data in history
      cpuHistory.push({ timestamp: cpuTimestamp, usage: parseFloat(cpuUsage) });
  
      // Remove oldest CPU data if more than 20 datasets
      if (cpuData.labels.length > 10) {
        cpuData.labels.shift();
        cpuData.datasets[0].data.shift();
      }
  
      // Update CPU chart
      cpuChart.update();
    }
    
    fetchData();
  
    // Fetch data every 5 seconds (adjust as needed)
    var statsinterval = setInterval(fetchData, 10000);
  </script> -->
  


<hr>

<div class="row text-light">
  <div class="col mb-2">
           <h2 style="font-family: 'Rubik', sans-serif;" class="fw-bold m-1" >Setup Your Server</h2>
           <p class="text-muted m-1" >This will Install all the required programs : Nginx , Git , Nodejs , Pm2 , Python</p>
    <button class="btn  btn-primary ms-1" onclick="setupserver(this)" id="saveButton"><i class="fa-solid fa-wand-magic-sparkles"></i> Setup Server</button>
    <hr>
    <!-- <p class="m-0 text-muted ms-3">Intall Sapratly</p>

    <div class="m-1">
      <button class="btn btn-sm btn-danger ms-3" onclick="nodejs(this)" id="saveButton"><i class="fa-brands fa-node"></i> Install Nodejs</button>

    </div>
    <div class="m-1">
      <button class="btn btn-sm btn-danger ms-3" onclick="nginx(this)" id="saveButton"><i class="fa-solid fa-server"></i> Install Nginx</button>

    </div>
    <div class="m-1">
      <button class="btn btn-sm btn-danger ms-3" onclick="npm(this)" id="saveButton"><i class="fa-solid fa-gear"></i> Install NPM and PM2</button>

    </div>
    <div class="m-1">
      <button class="btn btn-sm btn-danger ms-3" onclick="python(this)" id="saveButton"><i class="fa-brands fa-python"></i> Install Python</button>

    </div>
    <div class="m-1">
      <button class="btn btn-sm btn-danger ms-3" onclick="git(this)" id="saveButton"><i class="fa-brands fa-git-alt"></i> Install Git</button>

    </div> -->
    <!-- <hr> -->
  </div>
  
</div>





<div class="row text-light" style="max-height: 50vh;  overflow-y: auto; ">
  <pre id="logs" ></pre>
</div>



<script>
    async function setupserver(el) {
        var name = el.innerHTML
        el.innerHTML = '<i class="fas fa-spinner fa-spin "></i> Be Patient it will take a while...'

        const data = await execute(`sudo apt-cache install git -y \nsudo apt-get install nodejs -y\nsudo apt-get install npm -y\nnpm install pm2 -g\n sudo apt-get install nginx -y\nsudo apt-get install jq -y\napt-get install pyhton3 -y`)
        console.log(data);
        document.getElementById('logs').innerHTML = data


        el.innerHTML = `<i class="fa-solid fa-circle-check"></i> Done..` 
    }
</script>



